h1. jQuery.ui.wizard

bc. $( "form" ).wizard( [ options ] );

This plugin turns a standard HTML form into a wizard by breaking it into a series of well-defined steps. The purpose of these steps is to better group related inputs, preventing the user from becoming overwhelmed at the size or complexity of a form and helping them to better understand the structure of an unfamiliar form.

h3. Structure

The basic stucture of the wizard revolves around steps and branches, the latter being optional. A simple, linear form may only require one branch that contains all of the steps, whereas a complex form may require the use of several branches, or even nested branches. The number of steps and branches in a form is thus left entirely to the developer.

h3. Navigation

The wizard employs an asynchronous "finite-state machine":http://en.wikipedia.org/wiki/Finite-state_machine that determines how to navigate through itself. This is accomplished by defining states within the wizard, which are attached to steps, along with their corresponding actions, which are user-defined functions that should return the name of a state, the index of a step or the name of a branch. Steps without any state attached to them will perform the default action, which is to go to the next step in the current branch, by default.

h2. Options

bc. options: {
  animations: {
    show: {
      options: {
        duration: 0
      },
      properties: {
        opacity: "show"
      }
    },
    hide: {
      options: {
        duration: 0
      },
      properties: {
        opacity: "hide"
      }
    }
  },
  backward: ".backward",
  branches: ".branch",
  enableSubmit: false,
  forward: ".forward",
  header: ":header:first",
  initialStep: 0,
  stateAttribute: "data-state",
  stepClasses: {
    current: "current",
    exclude: "exclude",
    stop: "stop",
    submit: "submit",
    unidirectional: "unidirectional"
  },
  steps: ".step",
  submit: ":submit",
  transitions: {
    default: function( step ) {
      return this.stepIndex( step.nextAll( selector.step ) );
    }
  },
  unidirectional: false
}

* *animations* _Object_
  Used to define custom transition animations on step changes. There are animations for both showing and hiding the step. The _options_ and _properties_ objects will be passed directly into jQuery's ".animate()":http://api.jquery.com/animate/ function.

* *backward* _String_
  A selector string used to indicate which elements to bind the _backward_ method to. The method will be triggered on click.

* *branches* _String_
  A selector string used to indicate which elements are branches within the wizard.

* *enableSubmit* _Boolean_
  Whether or not to enable the submit button on all steps.

* *forward* _String_
  A selector string used to indicate which elements to bind the _forward_ method to. The method will be triggered on click.

* *header* _String_
  A selector string used to locate the header of the wizard.

* *initialStep* _String_, _Number_
  Which step to display after the wizard initializes.

* *stateAttribute* _String_
  The attribute, applied to steps, that contains the name of a state.

* *stepClasses* _Object_
  A map of meaningful step classes. These classes will have an effect on step behavior such as enabling or disabling navigation or preventing the step from being included in overall progress.

* *steps* _String_
  A selector string used to indicate which elements are steps within the wizard.

* *transitions* _Object_
  A map of keys representing states and their corresponding action methods. The key _default_ contains the default action to use on steps without a state

* *unidirectional* _Boolean_
  Whether or not this wizard should be unidirectional; that is allowing only forward movement.

h2. Events

bc. eventHandler( event, state )

Event handlers may be passed in on intialization in the options object, or they can be bound to the wizard at any time using the format *wizard*_eventname_. For example, _afterBackward_ becomes _wizardafterbackward_, note that it is in all lowercase.

* *afterBackward*
  Triggered after the wizard has completed going backwards.

* *afterForward*
  Triggered after the wizard has completed going forwards.

* *afterSelect*
  Triggered after the wizard has completed selecting a new step (going forwards or backwards).

* *beforeBackward*
  Triggered before the wizard attempts to move backwards. Returning false inside of this method will prevent the move.

* *beforeForward*
  Triggered before the wizard attempts to move forward. Returning false inside of this method will prevent the move.

* *beforeSelect*
  Triggered before the wizard attempts to move in any direction. Returning false inside of this method will prevent the move.

h2. Methods

h2. Requirements

h2. Compabitility

h2. Integration

This plugin has been developed to integrate with the following plugins:

* "jQuery Form":https://github.com/malsup/form
* "jQuery Validation":https://github.com/jzaefferer/jquery-validation
* "jQuery Autosave":https://github.com/nervetattoo/jquery-autosave
* "jQuery Masked Input":https://github.com/digitalBush/jquery.maskedinput

h2. License

Copyright (c) 2011 Kyle Florence
Dual licensed under the MIT and GPLv2 licenses.
